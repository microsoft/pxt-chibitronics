{
  "Array": "Add, remove, and replace items in lists.\n\nAdd, remove, and replace items in lists.",
  "Array.filter": "Return the elements of an array that meet the condition specified in a callback function.",
  "Array.filter|param|callbackfn": "A function that accepts up to two arguments. The filter method calls the callbackfn function one time for each element in the array.",
  "Array.get": "Get the value at a particular index",
  "Array.get|param|index": "the zero-based position in the list of the item, eg: 0",
  "Array.indexOf": "Return the index of the first occurrence of a value in an array.",
  "Array.indexOf|param|fromIndex": "The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.",
  "Array.indexOf|param|item": "The value to locate in the array.",
  "Array.insertAt": "Insert the value at a particular index, increases length by 1",
  "Array.insertAt|param|index": "the zero-based position in the list to insert the value, eg: 0",
  "Array.length": "Get or set the length of an array. This number is one more than the index of the last element the array.",
  "Array.map": "Call a defined callback function on each element of an array, and return an array containing the results.",
  "Array.map|param|callbackfn": "A function that accepts up to two arguments. The map method calls the callbackfn function one time for each element in the array.",
  "Array.pop": "Remove the last element from an array and return it.",
  "Array.push": "Append a new element to an array.",
  "Array.reduce": "Call the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.",
  "Array.reduce|param|callbackfn": "A function that accepts up to three arguments. The reduce method calls the callbackfn function one time for each element in the array.",
  "Array.reduce|param|initialValue": "Initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.",
  "Array.removeAt": "Remove the element at a certain index.",
  "Array.removeElement": "Remove the first occurence of an object. Returns true if removed.",
  "Array.reverse": "Reverse the elements in an array. The first array element becomes the last, and the last array element becomes the first.",
  "Array.set": "Store a value at a particular index",
  "Array.set|param|index": "the zero-based position in the list to store the value, eg: 0",
  "Array.shift": "Remove the first element from an array and return it. This method changes the length of the array.",
  "Array.slice": "Return a section of an array.",
  "Array.slice|param|end": "The end of the specified portion of the array. eg: 0",
  "Array.slice|param|start": "The beginning of the specified portion of the array. eg: 0",
  "Array.sort": "Sort the elements of an array in place and returns the array. The sort is not necessarily stable.",
  "Array.splice": "Remove elements from an array.",
  "Array.splice|param|deleteCount": "The number of elements to remove. eg: 0",
  "Array.splice|param|start": "The zero-based location in the array from which to start removing elements. eg: 0",
  "Array.unshift": "Add one element to the beginning of an array and return the new length of the array.",
  "Math": "More complex operations with numbers.",
  "Math.abs": "Returns the absolute value of a number (the value without regard to whether it is positive or negative).\nFor example, the absolute value of -5 is the same as the absolute value of 5.",
  "Math.abs|param|x": "A numeric expression for which the absolute value is needed.",
  "Math.acos": "Returns the arccosine (in radians) of a number",
  "Math.acos|param|x": "A number",
  "Math.asin": "Returns the arcsine (in radians) of a number",
  "Math.asin|param|x": "A number",
  "Math.atan": "Returns the arctangent (in radians) of a number",
  "Math.atan2": "Returns the arctangent of the quotient of its arguments.",
  "Math.atan2|param|x": "A number",
  "Math.atan2|param|y": "A number",
  "Math.atan|param|x": "A number",
  "Math.ceil": "Returns the smallest number greater than or equal to its numeric argument.",
  "Math.ceil|param|x": "A numeric expression.",
  "Math.cos": "Returns the cosine of a number.",
  "Math.cos|param|x": "An angle in radians",
  "Math.exp": "Returns returns ``e^x``.",
  "Math.exp|param|x": "A number",
  "Math.floor": "Returns the greatest number less than or equal to its numeric argument.",
  "Math.floor|param|x": "A numeric expression.",
  "Math.idiv": "Returns the value of integer signed 32 bit division of two numbers.",
  "Math.idiv|param|x": "The first number",
  "Math.idiv|param|y": "The second number",
  "Math.imul": "Returns the value of integer signed 32 bit multiplication of two numbers.",
  "Math.imul|param|x": "The first number",
  "Math.imul|param|y": "The second number",
  "Math.log": "Returns the natural logarithm (base e) of a number.",
  "Math.log|param|x": "A number",
  "Math.map": "Re-maps a number from one range to another. That is, a value of ``from low`` would get mapped to ``to low``, a value of ``from high`` to ``to high``, values in-between to values in-between, etc.",
  "Math.map|param|fromHigh": "the upper bound of the value's current range, eg: 255",
  "Math.map|param|fromLow": "the lower bound of the value's current range",
  "Math.map|param|toHigh": "the upper bound of the value's target range, eg: 100",
  "Math.map|param|toLow": "the lower bound of the value's target range",
  "Math.map|param|value": "value to map in ranges",
  "Math.max": "Returns the larger of two supplied numeric expressions.",
  "Math.min": "Returns the smaller of two supplied numeric expressions.",
  "Math.pow": "Returns the value of a base expression taken to a specified power.",
  "Math.pow|param|x": "The base value of the expression.",
  "Math.pow|param|y": "The exponent value of the expression.",
  "Math.random": "Returns a pseudorandom number between 0 and 1.",
  "Math.randomBoolean": "Generates a `true` or `false` value randomly, just like flipping a coin.",
  "Math.randomRange": "Returns a pseudorandom number between min and max included. \nIf both numbers are integral, the result is integral.",
  "Math.randomRange|param|max": "the upper inclusive bound, eg: 10",
  "Math.randomRange|param|min": "the lower inclusive bound, eg: 0",
  "Math.round": "Returns a supplied numeric expression rounded to the nearest number.",
  "Math.round|param|x": "The value to be rounded to the nearest number.",
  "Math.sign": "Returns the sign of the x, indicating whether x is positive, negative or zero.",
  "Math.sign|param|x": "The numeric expression to test",
  "Math.sin": "Returns the sine of a number.",
  "Math.sin|param|x": "An angle in radians",
  "Math.sqrt": "Returns the square root of a number.",
  "Math.sqrt|param|x": "A numeric expression.",
  "Math.tan": "Returns the tangent of a number.",
  "Math.tan|param|x": "An angle in radians",
  "Math.trunc": "Returns the number with the decimal part truncated.",
  "Math.trunc|param|x": "A numeric expression.",
  "String": "Combine, split, and search text strings.\n\nCombine, split, and search text strings.",
  "String.charAt": "Return the character at the specified index.",
  "String.charAt|param|index": "The zero-based index of the desired character.",
  "String.charCodeAt": "Return the Unicode value of the character at the specified location.",
  "String.charCodeAt|param|index": "The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.",
  "String.compare": "See how the order of characters in two strings is different (in ASCII encoding).",
  "String.compare|param|that": "String to compare to target string",
  "String.concat": "Returns a string that contains the concatenation of two or more strings.",
  "String.concat|param|other": "The string to append to the end of the string.",
  "String.fromCharCode": "Make a string from the given ASCII character code.",
  "String.isEmpty": "Returns a value indicating if the string is empty",
  "String.length": "Returns the length of a String object.",
  "String.substr": "Return a substring of the current string.",
  "String.substr|param|length": "number of characters to extract",
  "String.substr|param|start": "first character index; can be negative from counting from the end, eg:0",
  "lights": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "lights.effect": "Show a built-in effect on a pin.",
  "lights.effect|param|name": "pin name to write to, eg: AnalogPin.A0",
  "lights.effect|param|value": "effect to show, eg: Effect.Twinkle",
  "lights.off": "Set a pin or connector value 0",
  "lights.off|param|name": "pin to write to, eg: DigitalPin.D0",
  "lights.on": "Set a pin or connector value 1",
  "lights.onOff": "Get the toggle field editor",
  "lights.onOff|param|value": "on or off, 0 or 1, eg: 1",
  "lights.on|param|name": "pin to write to, eg: DigitalPin.D0",
  "lights.set": "Set an analog pin value as a percentage.",
  "lights.set|param|name": "pin name to write to, eg: AnalogPin.A0",
  "lights.set|param|value": "value to write to the pin between ``0`` and ``100``. eg:100,0",
  "lights.turn": "Turn a pin and on or off.",
  "lights.turn|param|name": "pin to write to, eg: DigitalPin.D0",
  "lights.turn|param|value": "1 for on, 0 for off, eg: 1",
  "loops": "Basic functionalities.\n\nProvides access to basic functionality.",
  "loops.forever": "Repeats the code forever in the background. On each iteration, allows other codes to run.",
  "loops.pause": "Pause for the specified time in milliseconds",
  "loops.pause|param|ms": "how long to pause for, eg: 100, 200, 500, 1000, 2000",
  "loops.timePicker": "Get the time field editor",
  "loops.timePicker|param|ms": "time duration in milliseconds, eg: 500, 1000",
  "pins": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "pins.analogPin": "Get the id of a AnalogPin.",
  "pins.analogPinMode": "Set the pin mode.",
  "pins.analogPinMode|param|mode": "one of the pin modes: Input, Output, PullUp, PullDown",
  "pins.analogPinMode|param|name": "pin to set the mode on, eg: AnalogPin.A0",
  "pins.analogPin|param|pin": "the analog pin, eg: AnalogPin.D0",
  "pins.analogRead": "Read the connector value as analog, that is, as a value comprised between 0 and 255.",
  "pins.analogRead|param|name": "pin to write to, eg: AnalogPin.A0",
  "pins.analogWrite": "Set the connector value as analog. Value must be comprised between 0 and 255.",
  "pins.analogWrite|param|name": "pin name to write to, eg: AnalogPin.A0",
  "pins.analogWrite|param|value": "value to write to the pin between ``0`` and ``255``. eg:255,0",
  "pins.digitalPin": "Get the id of a DigitalPin.",
  "pins.digitalPin|param|pin": "the digital pin, eg: DigitalPin.D0",
  "pins.digitalRead": "Read the specified pin or connector as either 0 or 1",
  "pins.digitalRead|param|name": "pin to read from, eg: DigitalPin.D0",
  "pins.digitalWrite": "Set a pin or connector value to the value",
  "pins.digitalWrite|param|name": "pin to write to, eg: DigitalPin.D0",
  "pins.pinMode": "Set the pin mode.",
  "pins.pinMode|param|mode": "one of the pin modes: Input, Output, PullUp, PullDown",
  "pins.pinMode|param|name": "pin to set the mode on, eg: DigitalPin.D0",
  "rgb": "Provides access to basic RGB LED functionality.\n\nProvides access to basic RGB LED functionality.\n\nProvides access to basic RGB LED functionality.",
  "rgb.colorNumberPicker": "Get the color wheel field editor",
  "rgb.colorWheelPicker": "Get the color wheel field editor",
  "rgb.colorWheelPicker|param|value": "value between 0 to 255 to get a color value, eg: 10",
  "rgb.colors": "Get the RGB value of a known color",
  "rgb.dim": "Dim an RGB color to make a new color.",
  "rgb.dim|param|level": "dim level between 0 and 5 eg: 1",
  "rgb.dim|param|rgb": "RGB color of the LED",
  "rgb.rgb": "Convert the red, green, blue color channels into an RGB color",
  "rgb.rgb|param|blue": "value of the blue channel between 0 and 255. eg: 255",
  "rgb.rgb|param|green": "value of the green channel between 0 and 255. eg: 255",
  "rgb.rgb|param|red": "value of the red channel between 0 and 255. eg: 255",
  "rgb.setBrightness": "Set the brightness of the LED. This change the brightness for the next operation.",
  "rgb.setBrightness|param|brightness": "a measure of LED brightness in 0-100. eg: 15",
  "rgb.setColor": "Make the on-board RGB LED show an RGB color (range 0-255 for r, g, b).",
  "rgb.setColor|param|rgb": "RGB color of the LED, eg: Colors.Red",
  "rgb.setRGBLed": "Set the rgb led to a specific red, green, blue color.",
  "rgb.wheel": "Converts wheel position into an RGB color",
  "rgb.wheel|param|wheelPos": "value between 0 to 255 to get a color value, eg: 99",
  "sensing": "Control currents in Pins for analog/digital signals, servos, i2c, ...",
  "sensing.pressed": "Check a pin or connector is touched or connected.",
  "sensing.pressed|param|name": "pin to read from, eg: DigitalPin.D0",
  "sensing.read": "Read a pin or connector as an analog value between 0 and 100.",
  "sensing.read|param|name": "pin to write to, eg: AnalogPin.A0"
}