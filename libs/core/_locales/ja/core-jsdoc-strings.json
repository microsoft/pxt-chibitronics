{
  "Math.randomBoolean":"硬貨を弾くことのようなちょうど 'true' または 'false' の値をランダムに生成します。",
  "String.fromCharCode":"指定された ASCII 文字コードから文字列を確認します。",
  "basic":"基本的なマイクロ: ビット機能へのアクセスを提供します。",
  "basic.clearScreen":"すべての Led をオフにします。",
  "basic.forever":"永遠にバック グラウンドでコードを繰り返します。各イテレーションを実行するその他のコードを使用できます。",
  "basic.pause":"ミリ秒で指定された時間一時停止します。",
  "basic.plotLeds":"LED 画面にイメージを描画します。",
  "basic.showAnimation":"アニメーションとして LED スクリーンのシーケンスを示しています。",
  "basic.showLeds":"LED 画面にイメージを描画します。",
  "basic.showNumber":"画面上の数字をスクロールします。数が画面上に収まる場合 (つまりは 1 桁)、スクロールしません。",
  "basic.showString":"一度に 1 つの文字の表示のテキストを表示します。文字列が画面上に収まる場合 (すなわち、1 つの文字)、スクロールしません。",
  "control":"ランタイムおよびイベント ユーティリティ。",
  "control.inBackground":"スケジュールは、バック グラウンドで実行されるコードします。",
  "control.reset":"BBC のマイクロ: ビットをリセットします。",
  "game":"単一 LED スプライト ゲーム エンジン",
  "game.addScore":"現在のスコアにポイントを追加します。",
  "game.gameOver":"ゲーム アニメーションを表示します。",
  "game.score":"現在のスコアを取得します。",
  "game.setScore":"現在のスコアの値を設定します",
  "game.startCountdown":"ゲームのカウント ダウン タイマーを開始します。",
  "images":"作成、操作および LED の画像を表示します。",
  "images.createBigImage":"2 フレームを持つイメージを作成します。",
  "images.createImage":"LED 画面に合ったイメージを作成します。",
  "input":"イベントやセンサーからのデータ",
  "input.acceleration":"ミリ gravitys の加速度値を取得 (ボードを敷設するときフラット スクリーンを x = 0、y = 0、z = 1024年)",
  "input.buttonIsPressed":"'、' と 'B' のボタンの状態 (押されてかどうか) を取得します。",
  "input.calibrate":"時代遅れ、コンパス キャリブレーションは自動です。",
  "input.compassHeading":"度で、現在のコンパス コンパス針路を取得します。",
  "input.lightLevel":"'0 ' (暗い)「255」明るいから適用範囲内の LED スクリーン光レベルを読み取ります。",
  "input.magneticForce":"「マイクロ ・ テスラ」(μ '' T '') の磁気力の値を取得します。シミュレータでは、この関数はサポートされていません。",
  "input.onButtonPressed":"'、'、' B '(両方の' A + B ') ボタンが押されたときに何か",
  "input.onGesture":"画面を向いているときに実行するコードをアタッチします。",
  "input.onLogoDown":"ロゴは下方向とボードが垂直方向に実行されるコードをアタッチします。",
  "input.onLogoUp":"ロゴは上方向きとボードが垂直方向に実行されるコードをアタッチします。",
  "input.onPinPressed":"(「P0 '' や '' P1 '' 両方 '' P2 '') ピンが押されたときに何かを行います。",
  "input.onScreenDown":"画面が直面しているときに実行するコードをアタッチします。",
  "input.onScreenUp":"画面を向いているときに実行するコードをアタッチします。",
  "input.onShake":"デバイスを振るときに実行するコードをアタッチします。",
  "input.pinIsPressed":"(押すか) ピンの状態を取得します。回路を閉じるために地面を保持する必要があります。",
  "input.rotation":"度の 'x ' に沿って回転デバイスのピッチです。",
  "input.runningTime":"電源から経過したミリ秒数を取得します。",
  "input.setAccelerometerRange":"吊り下げた状態で加速度計のサンプル範囲を設定します。",
  "input.temperature":"摂氏温度を取得度 (° C)。",
  "led":"LED 画面を制御します。",
  "led.brightness":"画面の明るさから得る 0 (オフ) 255 (完全明るい)。",
  "led.fadeIn":"画面がフェードインします。",
  "led.fadeOut":"画面の明るさをフェードアウトします。",
  "led.plot":"オンに指定した LED を使用して x 座標と y 座標 (x は横方向、y は縦方向)。(0, 0) は左上。",
  "led.plotAll":"すべての LED が点灯します。",
  "led.plotBarGraph":"'値' と '高' の値に基づく垂直棒グラフを表示します。\n場合は '高' は 0、グラフを自動的に調整を取得します。",
  "led.point":"使用して指定された LED のオン\/オフ状態を取得 x 座標と y 座標。(0, 0) は左上。",
  "led.screenshot":"LED 画面のスクリーン ショットを取り、画像を返します。",
  "led.setBrightness":"画面の明るさ 0 (オフ) に設定 255 (完全明るい)。",
  "led.setDisplayMode":"黒と白とグレースケールの Led を表示するための表示モードを設定します。",
  "led.stopAnimation":"現在のアニメーションをキャンセルし、保留中のアニメーション他をクリアします。",
  "led.toggle":"特定のピクセルを切り替えます",
  "led.toggleAll":"現在の LED ディスプレイを反転します",
  "led.unplot":"指定した LED を使用してオフに x 座標と y 座標 (x は横方向、y は縦方向)。(0, 0) は左上。",
  "music":"ピン「P0 '' を介して音楽の音の生成。",
  "music.beat":"ビートのデュレーションをミリ秒単位で返します",
  "music.changeTempoBy":"指定した量によってテンポを変更します。",
  "music.noteFrequency":"ノートの頻度を取得します。",
  "music.playTone":"指定された期間のピン 'P0' を通じて調子を果たしています。",
  "music.rest":"かかっている (何も果たしている) ピン 'P0' により指定した時刻に。",
  "music.ringTone":"ピン「P0 '' から音をを再生します。",
  "music.setTempo":"テンポを一定に設定します",
  "music.tempo":"1 分あたりのビートのテンポを返します。速度はテンポ (bpm = 1 分あたりのビート) ノートを遊んで。テンポの値が大きいほど、高速のノートが再生されます。",
  "pins":"アナログ\/デジタル信号、サーボ、i2c、ピンで電流を制御します。",
  "pins.analogPitch":"現在のピッチ端子にパルス幅変調 (PWM) 信号を出力します。'アナログ設定ピッチ pin' を使用して、ピッチのピンを定義します。",
  "pins.analogReadPin":"つまり、0 から 1023年の間から成る値としてアナログ、としてコネクタ値を読み取る。",
  "pins.analogSetPeriod":"アナログで与えられた値に出力のパルス幅変調 (PWM) を構成 * * マイクロ秒 * * または '' 1\/1000年ミリ秒。\nこのピンはアナログ出力 ('アナログ書き込みピン' を使用) として構成されていない場合、操作には影響がありません。",
  "pins.analogSetPitchPin":"'ピン-> アナログ ピッチ' を使用するときに使用される pin を設定します。",
  "pins.analogWritePin":"アナログ コネクタの値を設定します。値は、0 から 1023年の間で構成する必要があります。",
  "pins.digitalReadPin":"0 または 1 のいずれかとして指定した pin またはコネクタを読む",
  "pins.digitalWritePin":"0 または 1 のいずれかにピンまたはコネクタの値を設定します。",
  "pins.i2cReadNumber":"7 ビット I2C アドレスから 1 つの番号を読み取る。",
  "pins.i2cWriteNumber":"7 ビット I2C アドレスに 1 つの番号を書きます。",
  "pins.map":"1 つの範囲から別の数字を再マップします。つまり、'から低 'の値 'に高'、値、中間などに中間値方' に ''から高' の値マッピングでしょう。",
  "pins.onPulsed":"デジタル入力にこの pin を構成し、タイムスタンプがこのピンは '高' または '低' 期間のイベントを生成します。",
  "pins.pulseDuration":"マイクロ秒で最後のパルスの期間を取得します。この関数は、' onPulsed ' ハンドラーから呼び出す必要があります。",
  "pins.servoSetPulse":"アナログ\/pwm 出力としてこの IO ピンを構成します、20 ms にする期間を構成し、それは与えられる値に基づいて、パルス幅を設定します * * マイクロ秒 * * または '' 1\/1000年ミリ秒です。",
  "pins.servoWritePin":"それに応じてシャフトを制御するサーボに値を書き込みます。標準サーボの軸をその方向に移動 (単位は度)、シャフトの角度に設定されます。連続回転サーボに、これは (' 0 ' 1 つの方向、「180」に満ちているフルスピード速度の他、と '' 90」の動きではないことに近い値であること) とサーボ スピードを設定します。",
  "pins.setPull":"このピンのプルを構成します。",
  "serial":"シリアル接続を介してデータを読み書きします。",
  "serial.readLine":"シリアル ポートからテキスト行を読み取ります。",
  "serial.redirect":"USBTX と USBRX 以外のピンを使用するシリアルのインスタンスの動的な設定。",
  "serial.writeLine":"連続するテキストの行を印刷します。",
  "serial.writeNumber":"連続する数値値を出力します。",
  "serial.writeString":"シリアル接続を使用してテキストの一部を送信します。",
  "serial.writeValue":"書き込み、「名前: 値」ペアのシリアル ライン。"
}